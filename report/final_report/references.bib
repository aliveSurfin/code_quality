@article{ekkel2017nearby,
  title     = {Nearby green space and human health: Evaluating accessibility metrics},
  author    = {Ekkel, E Dinand and de Vries, Sjerp},
  journal   = {Landscape and urban planning},
  volume    = {157},
  pages     = {214--220},
  year      = {2017},
  publisher = {Elsevier}
}


@article{jones1981accessibility,
  title   = {Accessibility measures: a literature review},
  author  = {Jones, SR},
  journal = {Publication of: Transport and Road Research Laboratory},
  number  = {TRRL LR 967 Monograph},
  year    = {1981}
}

@inproceedings{10.1145/1090785.1090831,
  author    = {Soiffer, Neil},
  title     = {MathPlayer: Web-Based Math Accessibility},
  year      = {2005},
  isbn      = {1595931597},
  publisher = {Association for Computing Machinery},
  address   = {New York, NY, USA},
  url       = {https://doi.org/10.1145/1090785.1090831},
  doi       = {10.1145/1090785.1090831},
  abstract  = {MathPlayer is a plug-in to Microsoft's Internet Explorer (IE) that renders MathML[11] visually. It also contains a number of features that make mathematical expressions accessible to people with print-disabilities. MathPlayer integrates with many screen readers including JAWS and Window-Eyes. MathPlayer also works with a number of TextHELP!'s learning disabilities products.},
  booktitle = {Proceedings of the 7th International ACM SIGACCESS Conference on Computers and Accessibility},
  pages     = {204–205},
  numpages  = {2},
  keywords  = {assistive technology, print disabilities, MathML, visual impairments, math accessibility},
  location  = {Baltimore, MD, USA},
  series    = {Assets '05}
}

@book{HalsteadComplexity,
  author    = {Halstead, Maurice H},
  editor    = {},
  publisher = {Eleviser North-Holland},
  title     = {Elements of Software Science},
  year      = {1977}
}

@techreport{cycloMaticComplexity,
  author      = {Thomas J McCabe},
  institution = {IEEE},
  title       = {A Complexity Measure},
  year        = {1976}
}

@techreport{classComplexity,
  author      = {S.R. Chidamber; C.F. Kemerer},
  institution = {IEEE},
  title       = {A metrics suite for object oriented design},
  year        = {1994}
}
@misc{goodhart,
  author       = {Strathern, Marilyn},
  howpublished = {European Review},
  title        = {'Improving ratings': audit in the British University system"},
  year         = {1997}
}

@inproceedings{modernCodeReview,
  author    = {Bacchelli, Alberto and Bird, Christian},
  booktitle = {2013 35th International Conference on Software Engineering (ICSE)},
  title     = {Expectations, outcomes, and challenges of modern code review},
  year      = {2013},
  volume    = {},
  number    = {},
  pages     = {712-721},
  doi       = {10.1109/ICSE.2013.6606617}
}

@article{softwareInspections,
  author  = {Ackerman, A.F. and Buchwald, L.S. and Lewski, F.H.},
  journal = {IEEE Software},
  title   = {Software inspections: an effective verification process},
  year    = {1989},
  volume  = {6},
  number  = {3},
  pages   = {31-36},
  doi     = {10.1109/52.28121}
}

@inproceedings{confusionInCodeReviews,
  author    = {Ebert, Felipe and Castor, Fernando and Novielli, Nicole and Serebrenik, Alexander},
  booktitle = {2019 IEEE 26th International Conference on Software Analysis, Evolution and Reengineering (SANER)},
  title     = {Confusion in Code Reviews: Reasons, Impacts, and Coping Strategies},
  year      = {2019},
  volume    = {},
  number    = {},
  pages     = {49-60},
  doi       = {10.1109/SANER.2019.8668024}
}

@book{cohen2006best,
  title     = {Best Kept Secrets of Peer Code Review},
  author    = {Cohen, J. and Brown, E. and Teleki, S. and DuRette, B.},
  isbn      = {9781599160672},
  url       = {https://books.google.co.uk/books?id=b9ywHanWN5kC},
  year      = {2006},
  publisher = {Printing Systems}
}

@article{10.1145/318774.318944,
  author     = {Ball, Thoms},
  title      = {The Concept of Dynamic Analysis},
  year       = {1999},
  issue_date = {Nov. 1999},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {24},
  number     = {6},
  issn       = {0163-5948},
  url        = {https://doi.org/10.1145/318774.318944},
  doi        = {10.1145/318774.318944},
  abstract   = {Dynamic analysis is the analysis of the properties of a running program. In this paper, we explore two new dynamic analyses based on program profiling:Frequency Spectrum Analysis. We show how analyzing the frequencies of program entities in a single execution can help programmers to decompose a program, identify related computations, and find computations related to specific input and output characteristics of a program.Coverage Concept Analysis. Concept analysis of test coverage data computes dynamic analogs to static control flow relationships such as domination, postdomination, and regions. Comparison of these dynamically computed relationships to their static counterparts can point to areas of code requiring more testing and can aid programmers in understanding how a program and its test sets relate to one another.},
  journal    = {SIGSOFT Softw. Eng. Notes},
  month      = {oct},
  pages      = {216–234},
  numpages   = {19}
}

@inproceedings{dynamicAnalysis,
  author    = {Ball, Thoms},
  title     = {The Concept of Dynamic Analysis},
  year      = {1999},
  isbn      = {3540665382},
  publisher = {Springer-Verlag},
  address   = {Berlin, Heidelberg},
  abstract  = {Dynamic analysis is the analysis of the properties of a running program. In this paper, we explore two new dynamic analyses based on program profiling:Frequency Spectrum Analysis. We show how analyzing the frequencies of program entities in a single execution can help programmers to decompose a program, identify related computations, and find computations related to specific input and output characteristics of a program.Coverage Concept Analysis. Concept analysis of test coverage data computes dynamic analogs to static control flow relationships such as domination, postdomination, and regions. Comparison of these dynamically computed relationships to their static counterparts can point to areas of code requiring more testing and can aid programmers in understanding how a program and its test sets relate to one another.},
  booktitle = {Proceedings of the 7th European Software Engineering Conference Held Jointly with the 7th ACM SIGSOFT International Symposium on Foundations of Software Engineering},
  pages     = {216–234},
  numpages  = {19},
  location  = {Toulouse, France},
  series    = {ESEC/FSE-7}
}

@article{graylin2009cyclomatic,
  title     = {Cyclomatic complexity and lines of code: empirical evidence of a stable linear relationship},
  author    = {Graylin, Jay and Hale, Joanne E and Smith, Randy K and David, Hale and Kraft, Nicholas A and Charles, WARD and others},
  journal   = {Journal of Software Engineering and Applications},
  volume    = {2},
  number    = {03},
  pages     = {137},
  year      = {2009},
  publisher = {Scientific Research Publishing}
}

@inproceedings{CCANDSLOC,
  author    = {Landman, Davy and Serebrenik, Alexander and Vinju, Jurgen},
  booktitle = {2014 IEEE International Conference on Software Maintenance and Evolution},
  title     = {Empirical Analysis of the Relationship between CC and SLOC in a Large Corpus of Java Methods},
  year      = {2014},
  volume    = {},
  number    = {},
  pages     = {221-230},
  doi       = {10.1109/ICSME.2014.44}
}

@online{code2flow,
  author = {Code 2 Flow},
  title  = {code2flow online interactive code to flowchart converter},
  year   = 2022,
  url    = {https://code2flow.com/}
}

@article{classDesignMetrics,
  author  = {Chidamber, S.R. and Kemerer, C.F.},
  journal = {IEEE Transactions on Software Engineering},
  title   = {A metrics suite for object oriented design},
  year    = {1994},
  volume  = {20},
  number  = {6},
  pages   = {476-493},
  doi     = {10.1109/32.295895}
}

@book{cleanCode,
  author    = {Martin, Robert C.},
  title     = {Clean Code: A Handbook of Agile Software Craftsmanship},
  year      = {2008},
  isbn      = {0132350882},
  publisher = {Prentice Hall PTR},
  address   = {USA},
  edition   = {1},
  abstract  = {Even bad code can function. But if code isnt clean, it can bring a development organization to its knees. Every year, countless hours and significant resources are lost because of poorly written code. But it doesnt have to be that way.Noted software expert Robert C. Martin, presents a revolutionary paradigm with Clean Code: A Handbook of Agile Software Craftsmanship. Martin, who has helped bring agile principles from a practitioners point of view to tens of thousands of programmers, has teamed up with his colleagues from Object Mentor to distill their best agile practice of cleaning code on the fly into a book that will instill within you the values of software craftsman, and make you a better programmerbut only if you work at it.What kind of work will you be doing? Youll be reading codelots of code. And you will be challenged to think about whats right about that code, and whats wrong with it. More importantly you will be challenged to reassess your professional values and your commitment to your craft. Clean Code is divided into three parts. The first describes the principles, patterns, and practices of writing clean code. The second part consists of several case studies of increasing complexity. Each case study is an exercise in cleaning up codeof transforming a code base that has some problems into one that is sound and efficient. The third part is the payoff: a single chapter containing a list of heuristics and smells gathered while creating the case studies. The result is a knowledge base that describes the way we think when we write, read, and clean code.Readers will come away from this book understandingHow to tell the difference between good and bad codeHow to write good code and how to transform bad code into good codeHow to create good names, good functions, good objects, and good classesHow to format code for maximum readability How to implement complete error handling without obscuring code logicHow to unit test and practice test-driven developmentWhat smells and heuristics can help you identify bad codeThis book is a must for any developer, software engineer, project manager, team lead, or systems analyst with an interest in producing better code.}
}

 @misc{sketchplanations,
  title   = {Goodhart's law: When a measure becomes a target, it cease to be a good measure.},
  url     = {https://sketchplanations.com/goodharts-law},
  journal = {Sketchplanations}
} 

@misc{SoftwareEvolution,
  author    = {Alexander Serebrenik},
  title     = {2IS55 Software Evolution},
  month     = {March},
  year      = {2016},
  publisher = {Eindhoven University of Technology}
}

@inbook{Goodhart1984,
  author    = {Goodhart, C. A. E.},
  title     = {Problems of Monetary Management: The UK Experience},
  booktitle = {Monetary Theory and Practice: The UK Experience},
  year      = {1984},
  publisher = {Macmillan Education UK},
  address   = {London},
  pages     = {91--121},
  abstract  = {In 1971 the monetary authorities1 in the UK adopted a new approach to monetary management, a change of policy announced and described in several papers on competition and credit control. The subsequent experience of trying to operate this revised system has, however, been troublesome and at times unhappy. The purpose here is to examine certain aspects of recent monetary developments in order to illustrate a number of more general analytical themes which may have relevance among several countries.},
  isbn      = {978-1-349-17295-5},
  doi       = {10.1007/978-1-349-17295-5_4},
  url       = {https://doi.org/10.1007/978-1-349-17295-5_4}
}

@article{strathern1997improving,
  title     = {‘Improving ratings’: audit in the British University system},
  author    = {Strathern, Marilyn},
  journal   = {European review},
  volume    = {5},
  number    = {3},
  pages     = {305--321},
  year      = {1997},
  publisher = {Cambridge University Press}
}

@techreport{NBERw22911,
  title       = {Corrective Policy and Goodhart's Law: The Case of Carbon Emissions from Automobiles},
  author      = {Reynaert, Mathias and Sallee, James M},
  institution = {National Bureau of Economic Research},
  type        = {Working Paper},
  series      = {Working Paper Series},
  number      = {22911},
  year        = {2016},
  month       = {December},
  doi         = {10.3386/w22911},
  url         = {http://www.nber.org/papers/w22911},
  abstract    = {Firms sometimes comply with externality-correcting policies by gaming the measure that determines policy. We show theoretically that such gaming can benefit consumers, even when it induces them to make mistakes, because gaming leads to lower prices by reducing costs. We use our insights to quantify the welfare effect of gaming in fuel-consumption ratings for automobiles, which we show increased sharply following aggressive policy reforms. We estimate a structural model of the car market and derive empirical analogs of the price effects and choice distortions identified by theory. We find that price effects outweigh distortions; on net, consumers benefit from gaming.}
}

@incollection{FRITZ201667,
  title     = {Measuring individual productivity},
  editor    = {Tim Menzies and Laurie Williams and Thomas Zimmermann},
  booktitle = {Perspectives on Data Science for Software Engineering},
  publisher = {Morgan Kaufmann},
  address   = {Boston},
  pages     = {67-71},
  year      = {2016},
  isbn      = {978-0-12-804206-9},
  doi       = {https://doi.org/10.1016/B978-0-12-804206-9.00013-1},
  url       = {https://www.sciencedirect.com/science/article/pii/B9780128042069000131},
  author    = {T. Fritz},
  keywords  = {measuring, productivity, software development, flow, context switches, Goodhart's law},
  abstract  = {Measuring productivity of individual developers is challenging. In some domains, such as car manufacturing, specific outcome measures over time, such as the number of cars produced in a day, can work well to measure and incentivize productivity. However, the less clearly defined and more flexible process of software development makes it difficult, if not impossible, to define such measures. In particular, there is no single and simple best metric that can be used for all software developers and more individual combinations of measures are wanted and needed that also take into account the process and not just the final outcome. In this chapter, we will discuss some of the challenges and previous insights on the measuring of individual developer productivity.}
}

@inproceedings{openSourcePerspective,
  author = {Morrison, Patrick and Pandita, Rahul and Murphy-Hill, Emerson and McLaughlin, Anne},
  year   = {2016},
  month  = {09},
  pages  = {171-179},
  title  = {Veteran developers' contributions and motivations: An open source perspective},
  doi    = {10.1109/VLHCC.2016.7739681}
}

@inproceedings{womenInOpenSource,
  author    = {Trinkenreich, Bianca},
  booktitle = {2021 IEEE/ACM 43rd International Conference on Software Engineering: Companion Proceedings (ICSE-Companion)},
  title     = {Please Don't Go — A Comprehensive Approach to Increase Women's Participation in Open Source Software},
  year      = {2021},
  volume    = {},
  number    = {},
  pages     = {293-298},
  doi       = {10.1109/ICSE-Companion52605.2021.00131}
}

@article{codeQualityEducation,
  author  = {Silva, Danilo and Nunes, Ingrid and Terra, Ricardo},
  year    = {2017},
  month   = {02},
  pages   = {},
  title   = {Investigating code quality tools in the context of software engineering education: CODE TOOLS IN SOFTWARE ENGINEERING EDUCATION},
  volume  = {25},
  journal = {Computer Applications in Engineering Education},
  doi     = {10.1002/cae.21793}
}

@inproceedings{codeQualityStudents,
  author = {Keuning, Hieke and Heeren, Bastiaan and Jeuring, Johan},
  year   = {2017},
  month  = {06},
  pages  = {110-115},
  title  = {Code Quality Issues in Student Programs},
  doi    = {10.1145/3059009.3059061}
}

 @misc{astexplorer,
  title   = {AST Explorer},
  url     = {https://astexplorer.net/},
  journal = {AST explorer}
} 

@misc{clangStatic,
  title   = {Clang Static Analyzer},
  url     = {https://clang-analyzer.llvm.org/},
  journal = {Clang Static Analyzer}
} 
@misc{clangTidy,
  title   = {Clang Tidy},
  url     = {https://clang.llvm.org/extra/clang-tidy/},
  journal = {Clang Tidy}
} 
 @misc{eslint,
  title   = {Pluggable javascript linter},
  url     = {https://eslint.org/},
  journal = {ESLint}
} 

@misc{wiki:Continuous_integration,
  author       = {Wikipedia},
  title        = {{Continuous integration} --- {W}ikipedia{,} The Free Encyclopedia},
  year         = {2022},
  howpublished = {\url{http://en.wikipedia.org/w/index.php?title=Continuous\%20integration&oldid=1081041616}}
}

 @misc{wiki:Integrated_development_environment,
  author       = {Wikipedia},
  title        = {{Integrated development environment} --- {W}ikipedia{,} The Free Encyclopedia},
  year         = {2022},
  howpublished = {\url{http://en.wikipedia.org/w/index.php?title=Integrated\%20development\%20environment&oldid=1084718432}}
}

 @inbook{bnf,
  author    = {McCracken, Daniel D. and Reilly, Edwin D.},
  title     = {Backus-Naur Form (BNF)},
  year      = {2003},
  isbn      = {0470864125},
  publisher = {John Wiley and Sons Ltd.},
  address   = {GBR},
  abstract  = {Backus-Naur Form, named after John W. Backus of the US and Peter Naur of Denmark, and usually written BNF, is the best-known example of a meta-language (q.v.), i.e. one that syntactically describes a programming language. Using BNF it is possible to specify which sequences of symbols constitute a syntactically valid program in a given language. (The question of semantics--i.e, what such valid strings of symbols mean--must be specified separately.) A discussion of the basic concepts of BNF follows.},
  booktitle = {Encyclopedia of Computer Science},
  pages     = {129–131},
  numpages  = {3}
}

 @misc{ecmascript2017,
  url     = {https://262.ecma-international.org/8.0/},
  journal = {ECMAScript 2017}
} 

 @misc{nearley.js,
  title   = {Nearley.js2.20.1},
  url     = {https://nearley.js.org/},
  journal = {nearley.js}
} 
@article{earley,
  author     = {Earley, Jay},
  title      = {An Efficient Context-Free Parsing Algorithm},
  year       = {1970},
  issue_date = {Feb 1970},
  publisher  = {Association for Computing Machinery},
  address    = {New York, NY, USA},
  volume     = {13},
  number     = {2},
  issn       = {0001-0782},
  url        = {https://doi.org/10.1145/362007.362035},
  doi        = {10.1145/362007.362035},
  abstract   = {A parsing algorithm which seems to be the most efficient general context-free algorithm known is described. It is similar to both Knuth's LR(k) algorithm and the familiar top-down algorithm. It has a time bound proportional to n3 (where n is the length of the string being parsed) in general; it has an n2 bound for unambiguous grammars; and it runs in linear time on a large class of grammars, which seems to include most practical context-free programming language grammars. In an empirical comparison it appears to be superior to the top-down and bottom-up algorithms studied by Griffiths and Petrick.},
  journal    = {Commun. ACM},
  month      = {feb},
  pages      = {94–102},
  numpages   = {9},
  keywords   = {parsing, compilers, context-free grammar, syntax analysis, computational complexity}
}


@inproceedings{waterfall,
  title     = {Managing the development of large software systems: concepts and techniques},
  author    = {Royce, Winston W},
  booktitle = {Proceedings of the 9th international conference on Software Engineering},
  pages     = {328--338},
  year      = {1987}
}

@article{waterfallvsagile,
  title   = {Waterfall vs. Agile methodology},
  author  = {McCormick, Mike},
  journal = {MPCS, N/A},
  year    = {2012}
}

 @misc{waterfallimage,
  url     = {https://www.tutorialspoint.com/sdlc/sdlc_waterfall_model.htm},
  journal = {SDLC - Waterfall Model}
} 

@article{agile,
  title     = {The agile manifesto},
  author    = {Fowler, Martin and Highsmith, Jim and others},
  journal   = {Software development},
  volume    = {9},
  number    = {8},
  pages     = {28--35},
  year      = {2001},
  publisher = {[San Francisco, CA: Miller Freeman, Inc., 1993-}
}

 @misc{sprints,
  title   = {Guide to scrum sprints: Wrike Scrum Guide},
  url     = {https://www.wrike.com/scrum-guide/scrum-sprints/},
  journal = {Wrike}
} 

@book{userStories,
  title     = {User stories applied: For agile software development},
  author    = {Cohn, Mike},
  year      = {2004},
  publisher = {Addison-Wesley Professional}
}

@article{moscow,
  title   = {Decrypting the MoSCoW analysis},
  author  = {Kuhn, Janet},
  journal = {The workable, practical guide to Do IT Yourself},
  volume  = {5},
  year    = {2009}
}

@article{tdd,
  author  = {Shull, Forrest and Melnik, Grigori and Turhan, Burak and Layman, Lucas and Diep, Madeline and Erdogmus, Hakan},
  journal = {IEEE Software},
  title   = {What Do We Know about Test-Driven Development?},
  year    = {2010},
  volume  = {27},
  number  = {6},
  pages   = {16-19},
  doi     = {10.1109/MS.2010.152}
}

@article{legalLiability,
  author  = {Goertzel, Karen},
  year    = {2016},
  month   = {01},
  pages   = {23-28},
  title   = {Legal liability for bad software},
  volume  = {29},
  journal = {CrossTalk}
}

 @misc{topDownBottomUp,
  title   = {Difference between top down parsing and bottom up parsing},
  url     = {https://www.geeksforgeeks.org/difference-between-top-down-parsing-and-bottom-up-parsing/},
  journal = {GeeksforGeeks},
  year    = {2019},
  month   = {May}
} 

@book{practicalCompiler,
  title     = {A Practical Approach to Compiler Construction},
  author    = {Des Watson},
  publisher = {Springer},
  isbn      = {9783319527895; 3319527894},
  year      = {2017},
  url       = {libgen.li/file.php?md5=08f72a9fa85f7793297178164a5580dc}
}
@online{astwiki,
  title  = {An abstract syntax tree for the following code for the Euclidean algorithm},
  author = {Dcoetzee},
  year   = {2011},
  url    = {https://en.wikipedia.org/wiki/Abstract_syntax_tree#/media/File:Abstract_syntax_tree_for_Euclidean_algorithm.svg}
}

 @misc{createreactapp,
  title   = {Create a new react app},
  url     = {https://reactjs.org/docs/create-a-new-react-app.html},
  journal = {React}
} 
 @misc{react,
  title   = {React  a JavaScript library for building user interfaces},
  url     = {https://reactjs.org/},
  journal = {A JavaScript library for building user interfaces}
} 
 @misc{node.js,
  url     = {https://nodejs.org/en/},
  journal = {Node.js},
  author  = {Node.js}
} 
 @misc{express,
  title   = {Node.js web application framework},
  url     = {https://expressjs.com/},
  journal = {Express}
} 

 @misc{prism,
  title   = {Prism.js},
  url     = {https://prismjs.com/},
  journal = {Prism}
} 

 @misc{prismExamples,
  title   = {Prism Examples},
  url     = {https://prismjs.com/#examples},
  journal = {Prism}
} 

 @misc{olivergeer,
  title   = {Creating an editable Textarea that supports syntax-highlighted code: CSS-tricks},
  url     = {https://css-tricks.com/creating-an-editable-textarea-that-supports-syntax-highlighted-code/},
  journal = {CSS},
  author  = {Oliver Geer                      on                        Apr 16 and Geer, Oliver},
  year    = {2021},
  month   = {Nov}
} 

 @misc{reactEvents,
  title   = {Handling events},
  url     = {https://reactjs.org/docs/handling-events.html},
  journal = {React}
} 

 @misc{reactRefs,
  title   = {Refs and the dom},
  url     = {https://reactjs.org/docs/refs-and-the-dom.html},
  journal = {React}
} 

 @misc{reactSetState,
  title   = {React.component},
  url     = {https://reactjs.org/docs/react-component.html#setstate},
  journal = {React}
} 

 @misc{preventDefault,
  title   = {Event.preventDefault() - web apis: MDN},
  url     = {https://developer.mozilla.org/en-US/docs/Web/API/Event/preventDefault},
  journal = {Web APIs | MDN}
} 

 @misc{reactDidUpdate,
  title   = {React.component},
  url     = {https://reactjs.org/docs/react-component.html#componentdidupdate},
  journal = {React}
} 
 @misc{parserCourse,
  title = {Building a parser from scratch},
  url   = {http://dmitrysoshnikov.com/courses/parser-from-scratch/}
} 
 @misc{regexp,
  title   = {Regular expressions - javascript: MDN},
  url     = {https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions},
  journal = {JavaScript | MDN}
} 

 @misc{jest,
  title   = {Jest · delightful JavaScript testing},
  url     = {https://jestjs.io/},
  journal = {Jest RSS}
} 
@misc{codeeditortesting,
  title = {Code editor testing},
  url   = {https://cq-code-editor-testing.herokuapp.com/}
} 
@misc{codeeditortesting2,
  title = {Code editor testing updated},
  url   = {https://code-editor-updated.herokuapp.com/}
} 
@misc{finalTesting,
  title = {Final testing deploy},
  url   = {https://code-quality-final-testing.herokuapp.com/}
} 

 @misc{angularjs,
  title   = {Angular: Superheroic JavaScript MVW framework},
  url     = {https://angularjs.org/},
  journal = {AngularJS}
} 